#!/bin/bash

# This script provides the main interface for interacting with the command line utilities used for
# starting and configuring the Live Lightshow.
#
# Arguments:
# <subcommand> possible values: *see below*
#
# Return status:
# 1: <subcommand> was invalid
# otherwise: $? of the given subcommand


#-Preliminaries---------------------------------#


# This will be overwritten upon installation.
# APP-DIRECTORY
readonly app_directory="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/.."

# Imports.
. "$app_directory/Utilities/lookup.sh"


#-Functions-------------------------------------#


# Returns on success if the light show's running-status matched a given flag, or else prints an
# error message and returns on failure.
#
# Arguments:
# * <run status flag> possible values: "--running", "--not-running"
#
# Return status:
# 0: success
# 1: the given flag was invalid
# 2: the running-status of the light show does not match the given flag
function assert_lightshow_ {
   case "$1" in
      --running)
         if [ -z "$("$app_directory/Command Line Interface/live_pids.sh")" ]; then
            echo -e "${print_red}No light show is currently running.$print_normal"
            return 2
         fi ;;
      --not-running)
         if [ -n "$("$app_directory/Command Line Interface/live_pids.sh")" ]; then
            echo -e "${print_red}A light show is currently running.$print_normal"
            return 2
         fi ;;
      *)
         print_error_for --flag "$1"; return 1 ;;
   esac

   return 0
}

# Ends a light show if one is running, or prints an error and returns on failure if none is running.
#
# Return status:
# 0: success
# 1: no light show is currently running
function end_lightshow_ {
   assert_lightshow_ --running || return 1

   local -r pids=$("$app_directory/Command Line Interface/live_pids.sh")
   while read pid; do silently- kill "$pid"; done <<< "$pids"

   echo -e "${print_green}Lightshow ended.$print_normal"
}

# This function handels the `live` subcommand.
#
# Arguments:
# * <main's $2, $3, ...>
#
# Returns:
# 1: <$2> was an invalid subcommand
# otherwise: $? of the given subcommand
function subcommand_live_ {
   # Binds the subcommand to `live` and realigns the arguments.
   local -r live_subcommand="$1"
   shift

   case "$live_subcommand" in
      info)
         assert_lightshow_ --running || return 1
         "$app_directory/Command Line Interface/live_info.sh" ;;

      configure)
         assert_lightshow_ --running || return 1
         "$app_directory/Catalogue/Scripts/Runtime/configure_server_instance.sh" "$@"

         local -r return_status=$?
         if [ $return_status -eq 1 ]; then
            echo -e "${print_red}This command expects a server instance as argument.$print_normal"
            return 1
         elif [ $return_status -eq 2 ]; then
            echo -e "${print_red}The given server-instance is not defined.$print_normal"
            return 2
         fi ;;

      save)
         assert_lightshow_ --running || return 1
         silently- "$app_directory/Catalogue/Scripts/Racks/save_live_rack.sh" "$@"

         local -r return_status=$?
         if [ $return_status -eq 1 ]; then
            echo -e "${print_red}This command expects a rack name as argument.$print_normal"
            return 1
         elif [ $return_status -eq 2 ]; then
            echo -e "${print_red}The given rack name is already taken.$print_normal"
            return 2
         fi ;;

      *)
         echo -e "$(text_for_ subcommand-live-usage)"
         return 1 ;;
   esac
}

# This function handels the `rack` subcommand.
#
# Arguments:
# * <main's $2, $3, ...>
#
# Returns:
# 1: <$2> was an invalid subcommand
# otherwise: $? of the given subcommand
function subcommand_rack_ {
   # Binds the subcommand to `rack` and realigns the arguments.
   local -r rack_subcommand="$1"
   shift

   case "$rack_subcommand" in
      list)
         "$app_directory/Catalogue/Scripts/Racks/list_racks.sh" ;;

      info)
         silently- --stderr "$app_directory/Catalogue/Scripts/Racks/rack_info.sh" "$@"

         local -r return_status=$?
         if [ $return_status -eq 1 ]; then
            echo -e "${print_red}This command expects a rack name as argument.$print_normal"
            return 1
         elif [ $return_status -eq 2 ]; then
            echo -e "${print_red}The given rack name is not defined.$print_normal"
            return 2
         fi ;;

      *)
         echo -e "$(text_for_ subcommand-rack-usage)"
         return 1 ;;
   esac
}

# This function handels the `server` subcommand.
#
# Arguments:
# * <main's $2, $3, ...>
#
# Returns:
# 1: <$2> was an invalid subcommand
# otherwise: $? of the given subcommand
function subcommand_server_ {
   # Binds the subcommand to `rack` and realigns the arguments.
   local -r server_subcommand="$1"
   shift

   case "$server_subcommand" in
      info)
         silently- --stderr "$app_directory/Catalogue/Scripts/Static/server_info.sh" "$@"

         local -r return_status=$?
         if [ $return_status -eq 1 ]; then
            echo -e "${print_red}This command expects a server name as argument.$print_normal"
            return 1
         elif [ $return_status -eq 2 ]; then
            echo -e "${print_red}The given server name is not defined.$print_normal"
            return 2
         elif [ $return_status -eq 3 ]; then
            echo -e "${print_red}The given server does not have an information page.$print_normal"
            return 3
         fi ;;

      import)
         assert_lightshow_ --not-running || exit 1
         "$app_directory/Command Line Interface/import_server.sh" "$@" ;;

      *)
         echo -e "$(text_for_ subcommand-server-usage)"
         return 1 ;;
   esac
}


#-Main------------------------------------------#


# Binds the subcommand and shifts the rest of the command line arguments to be passable to the
# subcommand.
readonly subcommand=$1
shift

# Runs the script corresponding to the given subcommand, or prints an error message and returns on
# failure if the given subcommand was invalid.
case "$subcommand" in
   initialize)
      assert_lightshow_ --not-running || exit 1

      echo -e "${print_green}Connecting to Arduino...$print_normal" >&2
      "$app_directory/Command Line Interface/push_program.sh" || exit $?

      echo -e "${print_green}Cataloguing server files...$print_normal" >&2
      "$app_directory/Catalogue/Scripts/Static/rebuild_static_catalogue.sh" ;;

   start)
      assert_lightshow_ --not-running || exit 1
      "$app_directory/Command Line Interface/start_lightshow.sh" "$@"

      if [ $? -eq 3 ]; then
         echo -e "${print_red}The given rack name is undefined.$print_normal"
         exit 3
      fi ;;

   live)
      subcommand_live_ "$@" || exit $? ;;

   rack)
      subcommand_rack_ "$@" || exit $? ;;

      # configure <rack name>

      # make <new rack's name>

      # remove <rack name>

   server)
      subcommand_server_ "$@" || exit $? ;;

      # remove <server name>
      # > Notify about racks affected by this removal.

   end)
      end_lightshow_ || exit 1 ;;

   directory)
      echo "$app_directory" ;;

   rebuild-static-catalogue)
      assert_lightshow_ --not-running || exit 1
      "$app_directory/Catalogue/Scripts/Static/rebuild_static_catalogue.sh" ;;

   *)
      echo -e "$(text_for_ lightshow-usage)"
      exit 1 ;;
esac

exit 0
